Default global: directed => digraph
Default global: driver => /usr/local/bin/dot
Default global: format => svg
Default global: label => ->
Default global: name => Perl
Default global: record_shape => Mrecord
Default global: strict => 0
Default global: subgraph => HASH(0x32ff7c8)
Default global: timeout => 10
Default graph: label => stringparser.bnf, rankdir => TB
Default node: shape => rectangle, style => filled
Default edge: color => grey
Added node: "꞉default" [ fillcolor="lightblue" label="꞉default" ]
Added node: "BNF"
Added edge: "BNF" -> "꞉default"
Added node: "꞉default_1" [ fillcolor="goldenrod" label="{action =\> \[values\]}" shape="Mrecord" ]
Added edge: "꞉default" -> "꞉default_1"
Added node: "lexeme default" [ fillcolor="lightblue" label="lexeme default" ]
Added edge: "BNF" -> "lexeme default"
Added node: "lexeme default_1" [ fillcolor="lightblue" label="{latm =\> 1}" shape="Mrecord" ]
Added edge: "lexeme default" -> "lexeme default_1"
Added node: "graph_grammar" [ fillcolor="lightgreen" label="{\:start|graph_grammar}" shape="Mrecord" ]
Added edge: "BNF" -> "graph_grammar"
Added node: "꞉discard" [ fillcolor="lightblue" label="꞉discard" ]
Added edge: "BNF" -> "꞉discard"
Added node: "whitespace" [ fillcolor="lightblue" label="whitespace" ]
Added edge: "꞉discard" -> "whitespace"
Added node: "" [ fillcolor="white" label="" ]
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added node: "',' node_statement" [ fillcolor="white" label=")" ]
Added edge: "BNF" -> "',' node_statement"
Added node: "end_node" [ fillcolor="white" label="" ]
Added edge: "BNF" -> "end_node"
Added edge: "BNF" -> "end_node"
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added node: "',' edge_statement" [ fillcolor="white" label=")" ]
Added edge: "BNF" -> "',' edge_statement"
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added node: "+" [ fillcolor="white" label="" ]
Added edge: "BNF" -> "+"
Added node: "string_token_set" [ fillcolor="white" label="end_attributes" ]
Added edge: "BNF" -> "string_token_set"
Added edge: "BNF" -> "+"
Added edge: "BNF" -> ""
Added node: "'꞉' attribute_value" [ fillcolor="white" label=")" ]
Added edge: "BNF" -> "'꞉' attribute_value"
Added edge: "BNF" -> "+"
Added edge: "BNF" -> "+"
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added node: "[[꞉print꞉]]" [ fillcolor="white" label="" ]
Added edge: "BNF" -> "[[꞉print꞉]]"
Added edge: "BNF" -> ""
Added edge: "BNF" -> "+"
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> ""
Added edge: "BNF" -> "+"
Default graph: label => stringparser.bnf, rankdir => TB
Default node: shape => rectangle, style => filled
Default edge: color => grey
Default subgraph: rank => max
Added node: "Legend" [ label=<<table bgcolor = 'white'>
<tr>
	<td bgcolor = 'lightgreen'>The green node is the start node</td>
</tr>
<tr>
	<td bgcolor = 'lightblue'>Lightblue nodes are for reserved rule names, etc</td>
</tr>
<tr>
	<td bgcolor = 'orchid'>Orchid nodes are for lexemes</td>
</tr>
<tr>
	<td bgcolor = 'goldenrod'>Golden nodes are for actions</td>
</tr>
<tr>
	<td bgcolor = 'firebrick1'>Red nodes are for events</td>
</tr>
</table>> shape="plaintext" ]
Driver: /usr/local/bin/dot. Output file: html/stringparser.svg. Format: svg. Timeout: 10 second(s)

digraph Perl
{
graph [ label="stringparser.bnf" rankdir="TB" ]
node [ shape="rectangle" style="filled" ]
edge [ color="grey" ]
"꞉default" [ fillcolor="lightblue" label="꞉default" ]
"BNF"
"BNF" -> "꞉default"
"꞉default_1" [ fillcolor="goldenrod" label="{action =\> \[values\]}" shape="Mrecord" ]
"꞉default" -> "꞉default_1"
"lexeme default" [ fillcolor="lightblue" label="lexeme default" ]
"BNF" -> "lexeme default"
"lexeme default_1" [ fillcolor="lightblue" label="{latm =\> 1}" shape="Mrecord" ]
"lexeme default" -> "lexeme default_1"
"graph_grammar" [ fillcolor="lightgreen" label="{\:start|graph_grammar}" shape="Mrecord" ]
"BNF" -> "graph_grammar"
"꞉discard" [ fillcolor="lightblue" label="꞉discard" ]
"BNF" -> "꞉discard"
"whitespace" [ fillcolor="lightblue" label="whitespace" ]
"꞉discard" -> "whitespace"
"" [ fillcolor="white" label="" ]
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"',' node_statement" [ fillcolor="white" label=")" ]
"BNF" -> "',' node_statement"
"end_node" [ fillcolor="white" label="" ]
"BNF" -> "end_node"
"BNF" -> "end_node"
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"',' edge_statement" [ fillcolor="white" label=")" ]
"BNF" -> "',' edge_statement"
"BNF" -> ""
"BNF" -> ""
"+" [ fillcolor="white" label="" ]
"BNF" -> "+"
"string_token_set" [ fillcolor="white" label="end_attributes" ]
"BNF" -> "string_token_set"
"BNF" -> "+"
"BNF" -> ""
"'꞉' attribute_value" [ fillcolor="white" label=")" ]
"BNF" -> "'꞉' attribute_value"
"BNF" -> "+"
"BNF" -> "+"
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"[[꞉print꞉]]" [ fillcolor="white" label="" ]
"BNF" -> "[[꞉print꞉]]"
"BNF" -> ""
"BNF" -> "+"
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> ""
"BNF" -> "+"

subgraph 
{
graph [ label="stringparser.bnf" rankdir="TB" ]
node [ shape="rectangle" style="filled" ]
edge [ color="grey" ]
rank="max" 
"Legend" [ label=<<table bgcolor = 'white'>
<tr>
	<td bgcolor = 'lightgreen'>The green node is the start node</td>
</tr>
<tr>
	<td bgcolor = 'lightblue'>Lightblue nodes are for reserved rule names, etc</td>
</tr>
<tr>
	<td bgcolor = 'orchid'>Orchid nodes are for lexemes</td>
</tr>
<tr>
	<td bgcolor = 'goldenrod'>Golden nodes are for actions</td>
</tr>
<tr>
	<td bgcolor = 'firebrick1'>Red nodes are for events</td>
</tr>
</table>> shape="plaintext" ]
}
}
Wrote html/stringparser.svg. Size: 22133 bytes
