Default global: directed => digraph
Default global: driver => /usr/local/bin/dot
Default global: format => svg
Default global: label => ->
Default global: name => Perl
Default global: record_shape => Mrecord
Default global: strict => 0
Default global: subgraph => HASH(0x251fec8)
Default global: timeout => 10
Default graph: label => json.2.bnf, rankdir => TB
Default node: shape => rectangle, style => filled
Default edge: color => grey
Added node: "json" [ fillcolor="lightgreen" label="{:start|json}" shape="Mrecord" ]
Added node: "꞉default" [ fillcolor="lightblue" label="꞉default" ]
Added edge: "json" -> "꞉default" [ label="" ]
Added node: "꞉default_1" [ fillcolor="lightblue" label="{action =\> ꞉꞉array}" shape="Mrecord" ]
Added edge: "꞉default" -> "꞉default_1" [ label="" ]
Added node: "꞉discard" [ fillcolor="lightblue" label="꞉discard" ]
Added edge: "json" -> "꞉discard" [ label="" ]
Added node: "whitespace" [ fillcolor="lightblue" label="whitespace" ]
Added edge: "꞉discard" -> "whitespace" [ label="" ]
--------------------------------------------------
Node:           json
Daughter count: 1 ::=
Daughter stack: 2
	object
	array
Adverb stack:   2
	{action =\> ꞉꞉first}
	{action =\> ꞉꞉first}
--------------------------------------------------
Added node: "object" [ fillcolor="white" label="object" ]
Added edge: "json" -> "object" [ label="" ]
Added node: "object_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
Added edge: "object" -> "object_0" [ label="" ]
Added node: "array" [ fillcolor="white" label="array" ]
Added edge: "json" -> "array" [ label="" ]
Added node: "array_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
Added edge: "array" -> "array_0" [ label="" ]
--------------------------------------------------
Node:           object
Daughter count: 1 ::=
Daughter stack: 1
	('{'), members, ('}')
Adverb stack:   1
	{bless =\> hash}
--------------------------------------------------
Added node: "('{') members ('}')" [ fillcolor="white" label="('{') members ('}')" ]
Added edge: "object" -> "('{') members ('}')" [ label="" ]
Added node: "('{')" [ fillcolor="white" label="('{')" ]
Added edge: "('{') members ('}')" -> "('{')" [ label="" ]
Added node: "('{')_0" [ fillcolor="gold" label="{bless =\> hash}" shape="Mrecord" ]
Added edge: "('{')" -> "('{')_0" [ label="" ]
Added node: "members" [ fillcolor="white" label="members" ]
Added edge: "('{') members ('}')" -> "members" [ label="" ]
Added node: "('}')" [ fillcolor="white" label="('}')" ]
Added edge: "('{') members ('}')" -> "('}')" [ label="" ]
--------------------------------------------------
Node:           members
Daughter count: 1 ::=
Daughter stack: 1
	pair
Adverb stack:   1
	{separator =\> comma}
--------------------------------------------------
Added node: "pair" [ fillcolor="white" label="pair" ]
Added edge: "members" -> "pair" [ label="" ]
Added node: "pair_0" [ fillcolor="gold" label="{separator =\> comma}" shape="Mrecord" ]
Added edge: "pair" -> "pair_0" [ label="" ]
--------------------------------------------------
Node:           pair
Daughter count: 1 ::=
Daughter stack: 1
	string, ('꞉'), value
Adverb stack:   1
	
--------------------------------------------------
Added node: "string ('꞉') value" [ fillcolor="white" label="string ('꞉') value" ]
Added edge: "pair" -> "string ('꞉') value" [ label="" ]
Added node: "string" [ fillcolor="white" label="string" ]
Added edge: "string ('꞉') value" -> "string" [ label="" ]
Added node: "('꞉')" [ fillcolor="white" label="('꞉')" ]
Added edge: "string ('꞉') value" -> "('꞉')" [ label="" ]
Added node: "value" [ fillcolor="white" label="value" ]
Added edge: "string ('꞉') value" -> "value" [ label="" ]
--------------------------------------------------
Node:           value
Daughter count: 1 ::=
Daughter stack: 7
	string
	object
	number
	array
	'true'
	'false'
	'null'
Adverb stack:   7
	{action =\> ꞉꞉first}
	{action =\> ꞉꞉first}
	{action =\> ꞉꞉first}
	{action =\> ꞉꞉first}
	{bless =\> true}
	{bless =\> false}
	{action =\> ꞉꞉undef}
--------------------------------------------------
Added edge: "value" -> "string" [ label="" ]
Added node: "string_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
Added edge: "string" -> "string_0" [ label="" ]
Added edge: "value" -> "object" [ label="" ]
Added edge: "object" -> "object_0" [ label="" ]
Added node: "number" [ fillcolor="white" label="number" ]
Added edge: "value" -> "number" [ label="" ]
Added node: "number_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
Added edge: "number" -> "number_0" [ label="" ]
Added edge: "value" -> "array" [ label="" ]
Added edge: "array" -> "array_0" [ label="" ]
Added node: "'true'" [ fillcolor="white" label="'true'" ]
Added edge: "value" -> "'true'" [ label="" ]
Added node: "'true'_0" [ fillcolor="gold" label="{bless =\> true}" shape="Mrecord" ]
Added edge: "'true'" -> "'true'_0" [ label="" ]
Added node: "'false'" [ fillcolor="white" label="'false'" ]
Added edge: "value" -> "'false'" [ label="" ]
Added node: "'false'_0" [ fillcolor="gold" label="{bless =\> false}" shape="Mrecord" ]
Added edge: "'false'" -> "'false'_0" [ label="" ]
Added node: "'null'" [ fillcolor="white" label="'null'" ]
Added edge: "value" -> "'null'" [ label="" ]
Added node: "'null'_0" [ fillcolor="gold" label="{action =\> ꞉꞉undef}" shape="Mrecord" ]
Added edge: "'null'" -> "'null'_0" [ label="" ]
--------------------------------------------------
Node:           array
Daughter count: 1 ::=
Daughter stack: 2
	('[', ']')
	('['), elements, (']')
Adverb stack:   2
	
	{action =\> ꞉꞉first}
--------------------------------------------------
Added node: "('[' ']')" [ fillcolor="white" label="('\[' '\]')" ]
Added edge: "array" -> "('[' ']')" [ label="" ]
Added node: "('['" [ fillcolor="white" label="('\['" ]
Added edge: "('[' ']')" -> "('['" [ label="" ]
Added node: "']')" [ fillcolor="white" label="'\]')" ]
Added edge: "('[' ']')" -> "']')" [ label="" ]
Added node: "('[') elements (']')" [ fillcolor="white" label="('\[') elements ('\]')" ]
Added edge: "array" -> "('[') elements (']')" [ label="" ]
Added node: "('[')" [ fillcolor="white" label="('\[')" ]
Added edge: "('[') elements (']')" -> "('[')" [ label="" ]
Added node: "('[')_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
Added edge: "('[')" -> "('[')_0" [ label="" ]
Added node: "elements" [ fillcolor="white" label="elements" ]
Added edge: "('[') elements (']')" -> "elements" [ label="" ]
Added node: "(']')" [ fillcolor="white" label="('\]')" ]
Added edge: "('[') elements (']')" -> "(']')" [ label="" ]
--------------------------------------------------
Node:           elements
Daughter count: 1 ::=
Daughter stack: 1
	value
Adverb stack:   1
	{separator =\> comma}
--------------------------------------------------
Added edge: "elements" -> "value" [ label="" ]
Added node: "value_0" [ fillcolor="gold" label="{separator =\> comma}" shape="Mrecord" ]
Added edge: "value" -> "value_0" [ label="" ]
--------------------------------------------------
Node:           number
Daughter count: 1 ~
Daughter stack: 4
	int
	int, frac
	int, exp
	int, frac, exp
Adverb stack:   4
	
	
	
	
--------------------------------------------------
Added node: "int" [ fillcolor="white" label="int" ]
Added edge: "number" -> "int" [ label="" ]
Added node: "int frac" [ fillcolor="white" label="int frac" ]
Added edge: "number" -> "int frac" [ label="" ]
Added edge: "int frac" -> "int" [ label="" ]
Added node: "frac" [ fillcolor="white" label="frac" ]
Added edge: "int frac" -> "frac" [ label="" ]
Added node: "int exp" [ fillcolor="white" label="int exp" ]
Added edge: "number" -> "int exp" [ label="" ]
Added edge: "int exp" -> "int" [ label="" ]
Added node: "exp" [ fillcolor="white" label="exp" ]
Added edge: "int exp" -> "exp" [ label="" ]
Added node: "int frac exp" [ fillcolor="white" label="int frac exp" ]
Added edge: "number" -> "int frac exp" [ label="" ]
Added edge: "int frac exp" -> "int" [ label="" ]
Added edge: "int frac exp" -> "frac" [ label="" ]
Added edge: "int frac exp" -> "exp" [ label="" ]
--------------------------------------------------
Node:           int
Daughter count: 1 ~
Daughter stack: 2
	digits
	'-', digits
Adverb stack:   2
	
	
--------------------------------------------------
Added node: "digits" [ fillcolor="white" label="digits" ]
Added edge: "int" -> "digits" [ label="" ]
Added node: "'-' digits" [ fillcolor="white" label="'-' digits" ]
Added edge: "int" -> "'-' digits" [ label="" ]
Added node: "'-'" [ fillcolor="white" label="'-'" ]
Added edge: "'-' digits" -> "'-'" [ label="" ]
Added edge: "'-' digits" -> "digits" [ label="" ]
--------------------------------------------------
Node:           digits
Daughter count: 1 ~
Daughter stack: 1
	[\\d]
Adverb stack:   1
	
--------------------------------------------------
Added node: "[\\d]" [ fillcolor="white" label="\[\\d\]" ]
Added edge: "digits" -> "[\\d]" [ label="" ]
--------------------------------------------------
Node:           frac
Daughter count: 1 ~
Daughter stack: 1
	'.', digits
Adverb stack:   1
	
--------------------------------------------------
Added node: "'.' digits" [ fillcolor="white" label="'.' digits" ]
Added edge: "frac" -> "'.' digits" [ label="" ]
Added node: "'.'" [ fillcolor="white" label="'.'" ]
Added edge: "'.' digits" -> "'.'" [ label="" ]
Added edge: "'.' digits" -> "digits" [ label="" ]
--------------------------------------------------
Node:           exp
Daughter count: 1 ~
Daughter stack: 1
	e, digits
Adverb stack:   1
	
--------------------------------------------------
Added node: "e digits" [ fillcolor="white" label="e digits" ]
Added edge: "exp" -> "e digits" [ label="" ]
Added node: "e" [ fillcolor="white" label="e" ]
Added edge: "e digits" -> "e" [ label="" ]
Added edge: "e digits" -> "digits" [ label="" ]
--------------------------------------------------
Node:           e
Daughter count: 1 ~
Daughter stack: 6
	'e'
	'e+'
	'e-'
	'E'
	'E+'
	'E-'
Adverb stack:   6
	
	
	
	
	
	
--------------------------------------------------
Added node: "'e'" [ fillcolor="white" label="'e'" ]
Added edge: "e" -> "'e'" [ label="" ]
Added node: "'e+'" [ fillcolor="white" label="'e+'" ]
Added edge: "e" -> "'e+'" [ label="" ]
Added node: "'e-'" [ fillcolor="white" label="'e-'" ]
Added edge: "e" -> "'e-'" [ label="" ]
Added node: "'E'" [ fillcolor="white" label="'E'" ]
Added edge: "e" -> "'E'" [ label="" ]
Added node: "'E+'" [ fillcolor="white" label="'E+'" ]
Added edge: "e" -> "'E+'" [ label="" ]
Added node: "'E-'" [ fillcolor="white" label="'E-'" ]
Added edge: "e" -> "'E-'" [ label="" ]
--------------------------------------------------
Node:           string
Daughter count: 1 ::=
Daughter stack: 1
	string lexeme
Adverb stack:   1
	{bless =\> string}
--------------------------------------------------
Added node: "string lexeme" [ fillcolor="white" label="string lexeme" ]
Added edge: "string" -> "string lexeme" [ label="" ]
Added node: "string lexeme_0" [ fillcolor="gold" label="{bless =\> string}" shape="Mrecord" ]
Added edge: "string lexeme" -> "string lexeme_0" [ label="" ]
--------------------------------------------------
Node:           string lexeme
Daughter count: 1 ~
Daughter stack: 1
	quote, string contents, quote
Adverb stack:   1
	
--------------------------------------------------
Added node: "quote string contents quote" [ fillcolor="white" label="quote string contents quote" ]
Added edge: "string lexeme" -> "quote string contents quote" [ label="" ]
Added node: "quote" [ fillcolor="white" label="quote" ]
Added edge: "quote string contents quote" -> "quote" [ label="" ]
Added node: "string contents" [ fillcolor="white" label="string contents" ]
Added edge: "quote string contents quote" -> "string contents" [ label="" ]
Added edge: "quote string contents quote" -> "quote" [ label="" ]
--------------------------------------------------
Node:           quote
Daughter count: 1 ~
Daughter stack: 1
	[ꞌꞌ]
Adverb stack:   1
	
--------------------------------------------------
Added node: "[ꞌꞌ]" [ fillcolor="white" label="\[ꞌꞌ\]" ]
Added edge: "quote" -> "[ꞌꞌ]" [ label="" ]
--------------------------------------------------
Node:           string contents
Daughter count: 1 ~
Daughter stack: 1
	string char
Adverb stack:   1
	
--------------------------------------------------
Added node: "string char" [ fillcolor="white" label="string char" ]
Added edge: "string contents" -> "string char" [ label="" ]
--------------------------------------------------
Node:           string char
Daughter count: 1 ~
Daughter stack: 2
	[^ꞌꞌ\\\\]
	'\\', any char
Adverb stack:   2
	
	
--------------------------------------------------
Added node: "[^ꞌꞌ\\\\]" [ fillcolor="white" label="\[^ꞌꞌ\\\\]" ]
Added edge: "string char" -> "[^ꞌꞌ\\\\]" [ label="" ]
Added node: "'\\' any char" [ fillcolor="white" label="'\\' any char" ]
Added edge: "string char" -> "'\\' any char" [ label="" ]
Added node: "'\\'" [ fillcolor="white" label="'\\'" ]
Added edge: "'\\' any char" -> "'\\'" [ label="" ]
Added node: "any char" [ fillcolor="white" label="any char" ]
Added edge: "'\\' any char" -> "any char" [ label="" ]
--------------------------------------------------
Node:           any char
Daughter count: 1 ~
Daughter stack: 1
	[\\d\\D]
Adverb stack:   1
	
--------------------------------------------------
Added node: "[\\d\\D]" [ fillcolor="white" label="\[\\d\\D\]" ]
Added edge: "any char" -> "[\\d\\D]" [ label="" ]
--------------------------------------------------
Node:           comma
Daughter count: 1 ~
Daughter stack: 1
	','
Adverb stack:   1
	
--------------------------------------------------
Added node: "','" [ fillcolor="white" label="','" ]
Added node: "comma"
Added edge: "comma" -> "','" [ label="" ]
--------------------------------------------------
Node:           whitespace
Daughter count: 1 ~
Daughter stack: 1
	[\\s]
Adverb stack:   1
	
--------------------------------------------------
Added node: "[\\s]" [ fillcolor="white" label="\[\\s\]" ]
Added edge: "whitespace" -> "[\\s]" [ label="" ]
Driver: /usr/local/bin/dot. Output file: html/json.2.svg. Format: svg. Timeout: 10 second(s)

digraph Perl
{
graph [ label="json.2.bnf" rankdir="TB" ]
node [ shape="rectangle" style="filled" ]
edge [ color="grey" ]
"json" [ fillcolor="lightgreen" label="{:start|json}" shape="Mrecord" ]
"꞉default" [ fillcolor="lightblue" label="꞉default" ]
"json" -> "꞉default" [ label="" ]
"꞉default_1" [ fillcolor="lightblue" label="{action =\> ꞉꞉array}" shape="Mrecord" ]
"꞉default" -> "꞉default_1" [ label="" ]
"꞉discard" [ fillcolor="lightblue" label="꞉discard" ]
"json" -> "꞉discard" [ label="" ]
"whitespace" [ fillcolor="lightblue" label="whitespace" ]
"꞉discard" -> "whitespace" [ label="" ]
"object" [ fillcolor="white" label="object" ]
"json" -> "object" [ label="" ]
"object_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
"object" -> "object_0" [ label="" ]
"array" [ fillcolor="white" label="array" ]
"json" -> "array" [ label="" ]
"array_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
"array" -> "array_0" [ label="" ]
"('{') members ('}')" [ fillcolor="white" label="('{') members ('}')" ]
"object" -> "('{') members ('}')" [ label="" ]
"('{')" [ fillcolor="white" label="('{')" ]
"('{') members ('}')" -> "('{')" [ label="" ]
"('{')_0" [ fillcolor="gold" label="{bless =\> hash}" shape="Mrecord" ]
"('{')" -> "('{')_0" [ label="" ]
"members" [ fillcolor="white" label="members" ]
"('{') members ('}')" -> "members" [ label="" ]
"('}')" [ fillcolor="white" label="('}')" ]
"('{') members ('}')" -> "('}')" [ label="" ]
"pair" [ fillcolor="white" label="pair" ]
"members" -> "pair" [ label="" ]
"pair_0" [ fillcolor="gold" label="{separator =\> comma}" shape="Mrecord" ]
"pair" -> "pair_0" [ label="" ]
"string ('꞉') value" [ fillcolor="white" label="string ('꞉') value" ]
"pair" -> "string ('꞉') value" [ label="" ]
"string" [ fillcolor="white" label="string" ]
"string ('꞉') value" -> "string" [ label="" ]
"('꞉')" [ fillcolor="white" label="('꞉')" ]
"string ('꞉') value" -> "('꞉')" [ label="" ]
"value" [ fillcolor="white" label="value" ]
"string ('꞉') value" -> "value" [ label="" ]
"value" -> "string" [ label="" ]
"string_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
"string" -> "string_0" [ label="" ]
"value" -> "object" [ label="" ]
"object" -> "object_0" [ label="" ]
"number" [ fillcolor="white" label="number" ]
"value" -> "number" [ label="" ]
"number_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
"number" -> "number_0" [ label="" ]
"value" -> "array" [ label="" ]
"array" -> "array_0" [ label="" ]
"'true'" [ fillcolor="white" label="'true'" ]
"value" -> "'true'" [ label="" ]
"'true'_0" [ fillcolor="gold" label="{bless =\> true}" shape="Mrecord" ]
"'true'" -> "'true'_0" [ label="" ]
"'false'" [ fillcolor="white" label="'false'" ]
"value" -> "'false'" [ label="" ]
"'false'_0" [ fillcolor="gold" label="{bless =\> false}" shape="Mrecord" ]
"'false'" -> "'false'_0" [ label="" ]
"'null'" [ fillcolor="white" label="'null'" ]
"value" -> "'null'" [ label="" ]
"'null'_0" [ fillcolor="gold" label="{action =\> ꞉꞉undef}" shape="Mrecord" ]
"'null'" -> "'null'_0" [ label="" ]
"('[' ']')" [ fillcolor="white" label="('\[' '\]')" ]
"array" -> "('[' ']')" [ label="" ]
"('['" [ fillcolor="white" label="('\['" ]
"('[' ']')" -> "('['" [ label="" ]
"']')" [ fillcolor="white" label="'\]')" ]
"('[' ']')" -> "']')" [ label="" ]
"('[') elements (']')" [ fillcolor="white" label="('\[') elements ('\]')" ]
"array" -> "('[') elements (']')" [ label="" ]
"('[')" [ fillcolor="white" label="('\[')" ]
"('[') elements (']')" -> "('[')" [ label="" ]
"('[')_0" [ fillcolor="gold" label="{action =\> ꞉꞉first}" shape="Mrecord" ]
"('[')" -> "('[')_0" [ label="" ]
"elements" [ fillcolor="white" label="elements" ]
"('[') elements (']')" -> "elements" [ label="" ]
"(']')" [ fillcolor="white" label="('\]')" ]
"('[') elements (']')" -> "(']')" [ label="" ]
"elements" -> "value" [ label="" ]
"value_0" [ fillcolor="gold" label="{separator =\> comma}" shape="Mrecord" ]
"value" -> "value_0" [ label="" ]
"int" [ fillcolor="white" label="int" ]
"number" -> "int" [ label="" ]
"int frac" [ fillcolor="white" label="int frac" ]
"number" -> "int frac" [ label="" ]
"int frac" -> "int" [ label="" ]
"frac" [ fillcolor="white" label="frac" ]
"int frac" -> "frac" [ label="" ]
"int exp" [ fillcolor="white" label="int exp" ]
"number" -> "int exp" [ label="" ]
"int exp" -> "int" [ label="" ]
"exp" [ fillcolor="white" label="exp" ]
"int exp" -> "exp" [ label="" ]
"int frac exp" [ fillcolor="white" label="int frac exp" ]
"number" -> "int frac exp" [ label="" ]
"int frac exp" -> "int" [ label="" ]
"int frac exp" -> "frac" [ label="" ]
"int frac exp" -> "exp" [ label="" ]
"digits" [ fillcolor="white" label="digits" ]
"int" -> "digits" [ label="" ]
"'-' digits" [ fillcolor="white" label="'-' digits" ]
"int" -> "'-' digits" [ label="" ]
"'-'" [ fillcolor="white" label="'-'" ]
"'-' digits" -> "'-'" [ label="" ]
"'-' digits" -> "digits" [ label="" ]
"[\\d]" [ fillcolor="white" label="\[\\d\]" ]
"digits" -> "[\\d]" [ label="" ]
"'.' digits" [ fillcolor="white" label="'.' digits" ]
"frac" -> "'.' digits" [ label="" ]
"'.'" [ fillcolor="white" label="'.'" ]
"'.' digits" -> "'.'" [ label="" ]
"'.' digits" -> "digits" [ label="" ]
"e digits" [ fillcolor="white" label="e digits" ]
"exp" -> "e digits" [ label="" ]
"e" [ fillcolor="white" label="e" ]
"e digits" -> "e" [ label="" ]
"e digits" -> "digits" [ label="" ]
"'e'" [ fillcolor="white" label="'e'" ]
"e" -> "'e'" [ label="" ]
"'e+'" [ fillcolor="white" label="'e+'" ]
"e" -> "'e+'" [ label="" ]
"'e-'" [ fillcolor="white" label="'e-'" ]
"e" -> "'e-'" [ label="" ]
"'E'" [ fillcolor="white" label="'E'" ]
"e" -> "'E'" [ label="" ]
"'E+'" [ fillcolor="white" label="'E+'" ]
"e" -> "'E+'" [ label="" ]
"'E-'" [ fillcolor="white" label="'E-'" ]
"e" -> "'E-'" [ label="" ]
"string lexeme" [ fillcolor="white" label="string lexeme" ]
"string" -> "string lexeme" [ label="" ]
"string lexeme_0" [ fillcolor="gold" label="{bless =\> string}" shape="Mrecord" ]
"string lexeme" -> "string lexeme_0" [ label="" ]
"quote string contents quote" [ fillcolor="white" label="quote string contents quote" ]
"string lexeme" -> "quote string contents quote" [ label="" ]
"quote" [ fillcolor="white" label="quote" ]
"quote string contents quote" -> "quote" [ label="" ]
"string contents" [ fillcolor="white" label="string contents" ]
"quote string contents quote" -> "string contents" [ label="" ]
"quote string contents quote" -> "quote" [ label="" ]
"[ꞌꞌ]" [ fillcolor="white" label="\[ꞌꞌ\]" ]
"quote" -> "[ꞌꞌ]" [ label="" ]
"string char" [ fillcolor="white" label="string char" ]
"string contents" -> "string char" [ label="" ]
"[^ꞌꞌ\\\\]" [ fillcolor="white" label="\[^ꞌꞌ\\\\]" ]
"string char" -> "[^ꞌꞌ\\\\]" [ label="" ]
"'\\' any char" [ fillcolor="white" label="'\\' any char" ]
"string char" -> "'\\' any char" [ label="" ]
"'\\'" [ fillcolor="white" label="'\\'" ]
"'\\' any char" -> "'\\'" [ label="" ]
"any char" [ fillcolor="white" label="any char" ]
"'\\' any char" -> "any char" [ label="" ]
"[\\d\\D]" [ fillcolor="white" label="\[\\d\\D\]" ]
"any char" -> "[\\d\\D]" [ label="" ]
"','" [ fillcolor="white" label="','" ]
"comma"
"comma" -> "','" [ label="" ]
"[\\s]" [ fillcolor="white" label="\[\\s\]" ]
"whitespace" -> "[\\s]" [ label="" ]
}
Wrote html/json.2.svg. Size: 54642 bytes
